---
import {
  EVENT_TYPE_BY_DATE,
  EVENT_TYPE_EMOJI,
} from '../constants/event-type-emoji';
import EventTbc from './event-tbc.astro';

const { upcomingRace } = Astro.props;

interface UpcomingRaceProps {
  content: {
    schedule: {
      upcomingEventsAsList: {
        title: string;
        date: {
          day: string;
          dayNumber: string;
          month: string;
        };
        time: {
          start: string;
          end: string;
        };
      }[];
      upcomingEvents: {
        day: string;
        dayNumber: string;
        month: string;
        events: {
          title: string;
          date: string;
          time: {
            start: string;
            end: string;
          };
        }[];
      }[];
    };
  };
}

interface Props {
  upcomingRace: UpcomingRaceProps;
}
---

{
  upcomingRace.content.schedule.upcomingEventsAsList.find(
    (race) => race.date.dayNumber !== 'TBC'
  ) ? (
    <>
      <table class="hidden w-full table-auto border-collapse overflow-hidden rounded-lg bg-gray-200 p-5 dark:bg-gray-800 dark:text-white sm:inline-table">
        <thead class="bg-red-500 dark:bg-red-800">
          <tr class="text-left sm:table-row">
            <th class="p-2" />
            <th class="p-2">Dag</th>
            <th class="p-2" />
            <th class="p-2">Evenement</th>
            <th class="p-2">Tijd</th>
          </tr>
        </thead>
        <tbody class="flex-1 sm:flex-none">
          {upcomingRace.content.schedule.upcomingEventsAsList.map((race) => (
            <tr class={`text-lg`}>
              <td class="w-min p-2 dark:text-white">
                {EVENT_TYPE_EMOJI[race.title]}
              </td>
              <td class="p-2 dark:text-white">{race.date.day}</td>
              <td class="p-2 dark:text-white">
                {race.date.dayNumber} {race.date.month}
              </td>
              <td class="p-2 dark:text-white">{race.title}</td>
              <td class="p-2 dark:text-white">
                {race.time.start && race.time.end
                  ? `${race.time.start}-${race.time.end}`
                  : race.time.start}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <div class="flex flex-col gap-5 sm:hidden">
        {upcomingRace.content.schedule.upcomingEvents.map((date) => (
          <article class="flex flex-col overflow-hidden rounded-lg dark:text-white">
            <div class="flex flex-row justify-between bg-red-500 dark:bg-red-800">
              <h3 class="p-2 text-xl font-bold">
                {date.day} {date.dayNumber} {date.month}
              </h3>
              <span class="m-2 rounded-lg bg-white dark:bg-gray-800">
                <span class="p-2 text-xl font-bold">
                  {date.events.find((event) => event.title === 'Testdag')
                    ? 'üõ†Ô∏è'
                    : EVENT_TYPE_BY_DATE[date.day]}
                </span>
              </span>
            </div>
            <div class="flex flex-col bg-gray-200 dark:bg-gray-800">
              <div class="p-2">
                {date.events.map((event) => (
                  <div class="flex flex-row justify-between">
                    <span class="text-lg font-bold">{event.title}</span>
                    <span class="flex flex-row gap-2">
                      <span class="text-lg font-bold">
                        {EVENT_TYPE_EMOJI[event.title]}
                      </span>
                      <span class="text-lg font-bold">
                        {event.time.start && event.time.end
                          ? `${event.time.start}-${event.time.end}`
                          : event.time.start}
                      </span>
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </article>
        ))}
      </div>
    </>
  ) : (
    <EventTbc />
  )
}
